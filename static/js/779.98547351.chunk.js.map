{"version":3,"file":"static/js/779.98547351.chunk.js","mappings":"qUAGMA,EAAU,CACdC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAINC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAS,mCAAG,oGACAD,EAAAA,EAAAA,IAAA,qBAAgCJ,GADhC,cACjBM,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,qDAKTC,EAAW,mCAAG,WAAMC,GAAN,uFACFL,EAAAA,EAAAA,IAAA,6BAAgCK,GAAYT,GAD1C,cACnBM,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXG,EAAS,mCAAG,WAAMC,GAAN,uFACAP,EAAAA,EAAAA,IAAA,gBAAmBO,GAAcX,GADjC,cACjBM,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,sDAKTK,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,gBACZS,EADY,2BAErBb,GAHqB,cACjBM,EADiB,yBAKhBA,EAASC,MALO,2CAAH,sDAQTO,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAAA,EAAAA,IAAA,gBACZW,EADY,2BAErBf,GAHwB,cACpBM,EADoB,yBAKnBA,EAASC,MALU,2CAAH,sDAQzBC,EAAYQ,UAAY,CACtBP,SAAUQ,IAAAA,QAGZP,EAAUM,UAAY,CACpBL,WAAYM,IAAAA,QAGdL,EAAUI,UAAY,CACpBH,aAAcI,IAAAA,QAGhBH,EAAaE,UAAY,CACvBD,gBAAiBE,IAAAA,O,sICvDNC,EAAQC,EAAAA,EAAAA,GAAH,+GAOLC,EAAcD,EAAAA,EAAAA,EAAH,4G,SC+BxB,EAlCgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA6BF,EAAAA,EAAAA,WAAS,GAAtC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAASC,EAAAA,EAAAA,MAef,OAbAC,EAAAA,EAAAA,YAAU,WACR,KACEd,EAAAA,EAAAA,IAAaY,EAAOG,QAAQC,MAAK,SAAAxB,GAC/B,GAA+B,IAA3BA,EAASyB,cACX,OAAON,GAAW,GAEpBF,EAAWjB,EAAS0B,QACrB,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACP,KAGF,2BACGF,IAAU,uBAAG,4BACd,wBACGF,GACCA,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,SAACrB,EAAD,UAAQoB,KACR,SAAClB,EAAD,UAAcmB,MAFPF,EADC,QASrB,C","sources":["components/Api/Api.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst options = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YmFjMThkZTliMmI1NDkwNTZmYWVhNTZjOTAyNzU2YiIsInN1YiI6IjY0NmI1NGE5NTc1MzBlMDc4YTYwYjYxMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.M0yl0J_692yCcYW8WNbOdrUjK2jg9bmYgULdE6qFbyg',\n  },\n};\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const GetMovies = async () => {\n  const response = await axios.get(`trending/movie/day`, options);\n  return response.data;\n};\n\nexport const SearchMovie = async onSubmit => {\n  const response = await axios.get(`search/movie?query=${onSubmit}`, options);\n  return response.data;\n};\n\nexport const MovieInfo = async onSubmitId => {\n  const response = await axios.get(`movie/${onSubmitId}`, options);\n  return response.data;\n};\n\nexport const MovieCast = async onSubmitCast => {\n  const response = await axios.get(\n    `movie/${onSubmitCast}/credits?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const MovieReviews = async onSubmitReviews => {\n  const response = await axios.get(\n    `movie/${onSubmitReviews}/reviews?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nSearchMovie.propTypes = {\n  onSubmit: PropTypes.string,\n};\n\nMovieInfo.propTypes = {\n  onSubmitId: PropTypes.string,\n};\n\nMovieCast.propTypes = {\n  onSubmitCast: PropTypes.string,\n};\n\nMovieReviews.propTypes = {\n  onSubmitReviews: PropTypes.string,\n};","import styled from '@emotion/styled';\n\nexport const Autor = styled.h3`\n  margin-bottom: 10px;\n  font-size: x-large;\n  font-weight: 700;\n  color: #6a6a6a;\n`;\n\nexport const AutorReview = styled.p`\n  margin-bottom: 30px;\n  border-bottom: 2px solid black;\n  font-weight: lighter;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { MovieReviews } from '../Api/Api';\nimport { Autor,AutorReview } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [result, setReesult] = useState(false);\n  const params = useParams();\n\n  useEffect(() => {\n    try {\n      MovieReviews(params.filmId).then(response => {\n        if (response.total_results === 0) {\n          return setReesult(true);\n        }\n        setReviews(response.results);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [params]);\n\n  return (\n    <div>\n      {result && <p>Review not written yet</p>}\n      <ul>\n        {reviews &&\n          reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <Autor>{author}</Autor>\n              <AutorReview>{content}</AutorReview>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["options","headers","accept","Authorization","axios","GetMovies","response","data","SearchMovie","onSubmit","MovieInfo","onSubmitId","MovieCast","onSubmitCast","MovieReviews","onSubmitReviews","propTypes","PropTypes","Autor","styled","AutorReview","useState","reviews","setReviews","result","setReesult","params","useParams","useEffect","filmId","then","total_results","results","error","console","log","map","id","author","content"],"sourceRoot":""}