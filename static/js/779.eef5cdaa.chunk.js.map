{"version":3,"file":"static/js/779.eef5cdaa.chunk.js","mappings":"qUAGMA,EAAU,CACdC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAINC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAS,mCAAG,+GAEAD,EAAAA,EAAAA,IAAA,qBAAgCJ,GAFhC,cAEfM,EAFe,gBAGFA,EAAOC,KAHL,cAGfA,EAHe,yBAIdA,GAJc,kCAMrBC,QAAQC,MAAR,MANqB,0DAAH,qDAgBTC,EAAW,mCAAG,WAAMC,GAAN,kGAEFP,EAAAA,EAAAA,IAAA,6BAAgCO,GAAYX,GAF1C,cAEjBM,EAFiB,gBAGJA,EAAOC,KAHH,cAGjBA,EAHiB,yBAIhBA,GAJgB,kCAMvBC,QAAQC,MAAR,MANuB,0DAAH,sDAeXG,EAAS,mCAAG,WAAMC,GAAN,kGAEAT,EAAAA,EAAAA,IAAA,gBAAmBS,GAAcb,GAFjC,cAEfM,EAFe,gBAGFA,EAAOC,KAHL,cAGfA,EAHe,yBAIdA,GAJc,kCAMrBC,QAAQC,MAAR,MANqB,0DAAH,sDAeTK,EAAS,mCAAG,WAAMC,GAAN,kGAEAX,EAAAA,EAAAA,IAAA,gBACVW,EADU,2BAEnBf,GAJmB,cAEfM,EAFe,gBAMFA,EAAOC,KANL,cAMfA,EANe,yBAOdA,GAPc,kCASrBC,QAAQC,MAAR,MATqB,0DAAH,sDAqBTO,EAAY,mCAAG,WAAMC,GAAN,kGAEHb,EAAAA,EAAAA,IAAA,gBACVa,EADU,2BAEnBjB,GAJsB,cAElBM,EAFkB,gBAMLA,EAAOC,KANF,cAMlBA,EANkB,yBAOjBA,GAPiB,kCASxBC,QAAQC,MAAR,MATwB,0DAAH,sDAqBzBC,EAAYQ,UAAY,CACtBP,SAAUQ,IAAAA,QAGZP,EAAUM,UAAY,CACpBL,WAAYM,IAAAA,QAGdL,EAAUI,UAAY,CACpBH,aAAcI,IAAAA,QAGhBH,EAAaE,UAAY,CACvBD,gBAAiBE,IAAAA,O,sIChHNC,EAAQC,EAAAA,EAAAA,GAAH,+GAOLC,EAAcD,EAAAA,EAAAA,EAAH,4G,SC+BxB,EAlCgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA6BF,EAAAA,EAAAA,WAAS,GAAtC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAASC,EAAAA,EAAAA,MAef,OAbAC,EAAAA,EAAAA,YAAU,WACR,KACEd,EAAAA,EAAAA,IAAaY,EAAOG,QAAQC,MAAK,SAAAC,GAC/B,GAA+B,IAA3BA,EAASC,cACX,OAAOP,GAAW,GAEpBF,EAAWQ,EAASE,QACrB,GAGF,CAFC,MAAO1B,GACPD,QAAQ4B,IAAI3B,EACb,CACF,GAAE,CAACmB,EAAOG,UAGT,2BACGL,IAAU,uBAAG,4BACd,wBACGF,GACCA,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,SAACpB,EAAD,UAAQmB,KACR,SAACjB,EAAD,UAAckB,MAFPF,EADC,QASrB,C","sources":["components/Api/Api.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst options = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YmFjMThkZTliMmI1NDkwNTZmYWVhNTZjOTAyNzU2YiIsInN1YiI6IjY0NmI1NGE5NTc1MzBlMDc4YTYwYjYxMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.M0yl0J_692yCcYW8WNbOdrUjK2jg9bmYgULdE6qFbyg',\n  },\n};\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const GetMovies = async () => {\n  try {\n    const server = await axios.get(`trending/movie/day`, options);\n    const data = await server.data;\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n// export default GetMovies;\n\n// export const GetMovies = async () => {\n//   const response = await axios.get(`trending/movie/day`, options);\n//   return response.data;\n// };\n\nexport const SearchMovie = async onSubmit => {\n  try {\n    const server = await axios.get(`search/movie?query=${onSubmit}`, options);\n    const data = await server.data;\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// export const SearchMovie = async onSubmit => {\n//   const response = await axios.get(`search/movie?query=${onSubmit}`, options);\n//   return response.data;\n// };\n\nexport const MovieInfo = async onSubmitId => {\n  try {\n    const server = await axios.get(`movie/${onSubmitId}`, options);\n    const data = await server.data;\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// export const MovieInfo = async onSubmitId => {\n//   const response = await axios.get(`movie/${onSubmitId}`, options);\n//   return response.data;\n// };\n\nexport const MovieCast = async onSubmitCast => {\n  try {\n    const server = await axios.get(\n      `movie/${onSubmitCast}/credits?language=en-US`,\n      options\n    );\n    const data = await server.data;\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// export const MovieCast = async onSubmitCast => {\n//   const response = await axios.get(\n//     `movie/${onSubmitCast}/credits?language=en-US`,\n//     options\n//   );\n//   return response.data;\n// };\n\nexport const MovieReviews = async onSubmitReviews => {\n  try {\n    const server = await axios.get(\n      `movie/${onSubmitReviews}/reviews?language=en-US`,\n      options\n    );\n    const data = await server.data;\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// export const MovieReviews = async onSubmitReviews => {\n//   const response = await axios.get(\n//     `movie/${onSubmitReviews}/reviews?language=en-US`,\n//     options\n//   );\n//   return response.data;\n// };\n\nSearchMovie.propTypes = {\n  onSubmit: PropTypes.string,\n};\n\nMovieInfo.propTypes = {\n  onSubmitId: PropTypes.string,\n};\n\nMovieCast.propTypes = {\n  onSubmitCast: PropTypes.string,\n};\n\nMovieReviews.propTypes = {\n  onSubmitReviews: PropTypes.string,\n};\n","import styled from '@emotion/styled';\n\nexport const Autor = styled.h3`\n  margin-bottom: 10px;\n  font-size: x-large;\n  font-weight: 700;\n  color: #6a6a6a;\n`;\n\nexport const AutorReview = styled.p`\n  margin-bottom: 30px;\n  border-bottom: 2px solid black;\n  font-weight: lighter;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { MovieReviews } from '../Api/Api';\nimport { Autor,AutorReview } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [result, setReesult] = useState(false);\n  const params = useParams();\n\n  useEffect(() => {\n    try {\n      MovieReviews(params.filmId).then(response => {\n        if (response.total_results === 0) {\n          return setReesult(true);\n        }\n        setReviews(response.results);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [params.filmId]);\n\n  return (\n    <div>\n      {result && <p>Review not written yet</p>}\n      <ul>\n        {reviews &&\n          reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <Autor>{author}</Autor>\n              <AutorReview>{content}</AutorReview>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["options","headers","accept","Authorization","axios","GetMovies","server","data","console","error","SearchMovie","onSubmit","MovieInfo","onSubmitId","MovieCast","onSubmitCast","MovieReviews","onSubmitReviews","propTypes","PropTypes","Autor","styled","AutorReview","useState","reviews","setReviews","result","setReesult","params","useParams","useEffect","filmId","then","response","total_results","results","log","map","id","author","content"],"sourceRoot":""}