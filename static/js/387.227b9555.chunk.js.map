{"version":3,"file":"static/js/387.227b9555.chunk.js","mappings":"qUAGMA,EAAU,CACdC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAINC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAS,mCAAG,oGACAD,EAAAA,EAAAA,IAAA,qBAAgCJ,GADhC,cACjBM,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,qDAKTC,EAAW,mCAAG,WAAMC,GAAN,uFACFL,EAAAA,EAAAA,IAAA,6BAAgCK,GAAYT,GAD1C,cACnBM,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXG,EAAS,mCAAG,WAAMC,GAAN,uFACAP,EAAAA,EAAAA,IAAA,gBAAmBO,GAAcX,GADjC,cACjBM,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,sDAKTK,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,gBACZS,EADY,2BAErBb,GAHqB,cACjBM,EADiB,yBAKhBA,EAASC,MALO,2CAAH,sDAQTO,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAAA,EAAAA,IAAA,gBACZW,EADY,2BAErBf,GAHwB,cACpBM,EADoB,yBAKnBA,EAASC,MALU,2CAAH,sDAQzBC,EAAYQ,UAAY,CACtBP,SAAUQ,IAAAA,QAGZP,EAAUM,UAAY,CACpBL,WAAYM,IAAAA,QAGdL,EAAUI,UAAY,CACpBH,aAAcI,IAAAA,QAGhBH,EAAaE,UAAY,CACvBD,gBAAiBE,IAAAA,O,0ICvDNC,EAAOC,EAAAA,EAAAA,GAAH,4EAMJC,EAAgBD,EAAAA,EAAAA,IAAH,6CAIbE,EAAOF,EAAAA,EAAAA,GAAH,4KAMJG,EAAIH,EAAAA,EAAAA,EAAH,0F,SC+Bd,EA3Ca,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAASC,EAAAA,EAAAA,MACf,GAA6BJ,EAAAA,EAAAA,WAAS,GAAtC,eAAOK,EAAP,KAAeC,EAAf,KAgBA,OAbAC,EAAAA,EAAAA,YAAU,WACR,KACElB,EAAAA,EAAAA,IAAUc,EAAOK,QAAQC,MAAK,SAAA1B,GAC5B,GAA6B,IAAzBA,EAASkB,KAAKS,OAChB,OAAOJ,GAAW,GAEpBJ,EAAQnB,EAASkB,KAClB,GAGF,CAFC,MAAOU,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACR,KAGF,UAACN,EAAD,WACGQ,IAAU,uBAAG,aACd,SAACV,EAAD,UACGM,GACCA,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACP,UAACnB,EAAD,YACE,gBACEoB,IACEF,EACIA,GAzBL,kCAyB8BA,EACzB,6CAENG,IAAKF,EACLG,MAAO,OAET,SAACrB,EAAD,UAAIkB,MAVKF,EADJ,QAiBlB,C","sources":["components/Api/Api.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst options = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YmFjMThkZTliMmI1NDkwNTZmYWVhNTZjOTAyNzU2YiIsInN1YiI6IjY0NmI1NGE5NTc1MzBlMDc4YTYwYjYxMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.M0yl0J_692yCcYW8WNbOdrUjK2jg9bmYgULdE6qFbyg',\n  },\n};\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const GetMovies = async () => {\n  const response = await axios.get(`trending/movie/day`, options);\n  return response.data;\n};\n\nexport const SearchMovie = async onSubmit => {\n  const response = await axios.get(`search/movie?query=${onSubmit}`, options);\n  return response.data;\n};\n\nexport const MovieInfo = async onSubmitId => {\n  const response = await axios.get(`movie/${onSubmitId}`, options);\n  return response.data;\n};\n\nexport const MovieCast = async onSubmitCast => {\n  const response = await axios.get(\n    `movie/${onSubmitCast}/credits?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const MovieReviews = async onSubmitReviews => {\n  const response = await axios.get(\n    `movie/${onSubmitReviews}/reviews?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nSearchMovie.propTypes = {\n  onSubmit: PropTypes.string,\n};\n\nMovieInfo.propTypes = {\n  onSubmitId: PropTypes.string,\n};\n\nMovieCast.propTypes = {\n  onSubmitCast: PropTypes.string,\n};\n\nMovieReviews.propTypes = {\n  onSubmitReviews: PropTypes.string,\n};","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nexport const CastContainer = styled.div`\n  max-width: 700px;\n`;\n\nexport const Item = styled.li`\n  width: 200px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const P = styled.p`\n  font-size: larger;\n  text-align: center;\n  font-weight: 500;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { MovieCast } from '../Api/Api';\nimport { List, CastContainer, P, Item } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const params = useParams();\n  const [result, setReesult] = useState(false);\n  const imgURL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    try {\n      MovieCast(params.filmId).then(response => {\n        if (response.cast.length === 0) {\n          return setReesult(true);\n        }\n        setCast(response.cast);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [params]);\n\n  return (\n    <CastContainer>\n      {result && <p>No cast</p>}\n      <List>\n        {cast &&\n          cast.map(({ id, profile_path, name }) => (\n            <Item key={id}>\n              <img\n                src={\n                  profile_path\n                    ? profile_path && imgURL + profile_path\n                    : 'https://svgsilh.com/svg/1287911-4f4f4f.svg'\n                }\n                alt={name}\n                width={200}\n              />\n              <P>{name}</P>\n            </Item>\n          ))}\n      </List>\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n"],"names":["options","headers","accept","Authorization","axios","GetMovies","response","data","SearchMovie","onSubmit","MovieInfo","onSubmitId","MovieCast","onSubmitCast","MovieReviews","onSubmitReviews","propTypes","PropTypes","List","styled","CastContainer","Item","P","useState","cast","setCast","params","useParams","result","setReesult","useEffect","filmId","then","length","error","console","log","map","id","profile_path","name","src","alt","width"],"sourceRoot":""}